# SIC Search Implementation Guide

## The Schema Advantage

After analyzing your database schema, I've discovered that your `companies` table already has optimized fields for SIC code searching:

- `sic_code_1`, `sic_code_2`, etc.: Full SIC codes with descriptions (e.g., "47710 - Retail sale of clothing in specialised stores")
- `sic_code_1_num`, `sic_code_2_num`, etc.: Just the numeric portions (e.g., "47710")

This gives us an excellent opportunity to optimize the search process.

## Implementation Steps

### 1. Update the API SIC Search Function

First, update the `search_sic` function in `core/enrichment_api.py`:

```python
@app.route('/api/sic/search', methods=['GET'])
def search_sic():
    """Search for SIC codes by term with improved format handling."""
    try:
        import sqlite3
        
        search_term = request.args.get('term', '')
        logger.info(f"Searching for SIC term: '{search_term}'")
        
        if not search_term or len(search_term.strip()) < 2:
            return jsonify([])
        
        search_term = search_term.strip().lower()
        results = []
        
        with sqlite3.connect('company_data.db') as conn:
            # Use a row factory for named columns
            conn.row_factory = lambda cursor, row: {
                col[0]: row[idx] for idx, col in enumerate(cursor.description)
            }
            
            # Search in sic_codes table by industry term
            cursor = conn.execute(
                "SELECT Industry, SicCode FROM sic_codes WHERE LOWER(Industry) LIKE ?", 
                (f'%{search_term}%',)
            )
            rows = cursor.fetchall()
            
            for row in rows:
                industry = row['Industry']
                sic_code = row['SicCode']
                
                if sic_code:  # Ensure we have a SIC code
                    # Format the SIC code consistently (5 digits)
                    numeric_code = sic_code.zfill(5)
                    
                    # Query the companies table to get the actual format used
                    format_cursor = conn.execute(
                        "SELECT DISTINCT sic_code_1 FROM companies WHERE sic_code_1_num = ? LIMIT 1", 
                        (numeric_code,)
                    )
                    format_row = format_cursor.fetchone()
                    
                    # Use the database format if available, otherwise construct one
                    if format_row and format_row['sic_code_1']:
                        full_format = format_row['sic_code_1']
                    else:
                        full_format = f"{numeric_code} - {industry.title()}"
                    
                    # Add to results with both numeric and full formats
                    results.append({
                        'industry': industry.title(),
                        'sicCode': numeric_code,
                        'fullSicCode': full_format
                    })
        
        logger.info(f"Returning {len(results)} SIC code results for '{search_term}'")
        return jsonify(results)
        
    except Exception as e:
        logger.error(f"Error searching SIC codes: {str(e)}", exc_info=True)
        return jsonify({
            'error': 'An error occurred while searching SIC codes',
            'message': str(e)
        }), 500
```

### 2. Update the Company Search Function

Find the SIC code handling section in the `search_companies` function and replace it with:

```python
if sic_codes:
    logger.info(f"Searching with SIC codes: {sic_codes}")
    
    sic_conditions = []
    sic_params = []
    
    for sic_code in sic_codes:
        # Extract the numeric part at the beginning
        numeric_match = re.match(r'^\s*(\d+)', sic_code)
        if numeric_match:
            numeric_sic = numeric_match.group(1)
            logger.info(f"Extracted numeric SIC: {numeric_sic} from '{sic_code}'")
            
            # Use the numeric SIC code fields for more efficient searching
            sic_conditions.append("(sic_code_1_num = ? OR sic_code_2_num = ? OR sic_code_3_num = ? OR sic_code_4_num = ?)")
            sic_params.extend([numeric_sic, numeric_sic, numeric_sic, numeric_sic])
    
    if sic_conditions:
        query += f" AND ({' OR '.join(sic_conditions)})"
        params.extend(sic_params)
        logger.info(f"Added SIC search conditions using numeric fields: {' OR '.join(sic_conditions)}")
```

### 3. Update the Frontend Component

The SICSearchTab.tsx update remains the same as previously provided. The component should store and use the full SIC code format with description.

## Testing Your Implementation

After implementing these changes:

1. Restart the API server:
   ```bash
   ./run_apis.sh
   ```

2. Try these test scenarios:
   - Search for "Software" or "Retail" in the SIC search tab
   - Select a result and perform a company search
   - Try searching with just numeric SIC codes
   - Verify results are correctly returned in all cases

3. You can use the test script provided earlier to validate the implementation.

## Performance Comparison

The optimized implementation:

- **Before**: Used `LIKE` queries with wildcards (e.g., `sic_code_1 LIKE '62020%'`)
- **After**: Uses exact equality on numeric fields (e.g., `sic_code_1_num = '62020'`)

This should provide significant performance improvements, especially for large datasets.

## Troubleshooting

If you encounter issues:

1. Check if the sic_code_X_num fields are actually populated in your database:
   ```sql
   SELECT COUNT(*) FROM companies WHERE sic_code_1_num IS NOT NULL;
   ```

2. If the numeric fields aren't populated, you might need to extract and populate them:
   ```sql
   UPDATE companies 
   SET sic_code_1_num = TRIM(SUBSTR(sic_code_1, 1, INSTR(sic_code_1 || ' - ', ' - ') - 1))
   WHERE sic_code_1 IS NOT NULL;
   ```

3. Verify the exact data format in your database:
   ```sql
   SELECT company_number, sic_code_1, sic_code_1_num 
   FROM companies 
   WHERE sic_code_1 IS NOT NULL LIMIT 5;
   ```

## Long-term Recommendations

1. Ensure all sic_code_X_num fields are indexed for optimal performance:
   ```sql
   CREATE INDEX IF NOT EXISTS idx_sic_code_1_num ON companies(sic_code_1_num);
   CREATE INDEX IF NOT EXISTS idx_sic_code_2_num ON companies(sic_code_2_num);
   ```

2. Consider adding a dedicated SIC code cache table for even faster lookups.

3. Implement an autocomplete feature for SIC codes to improve the user experience.
