package site.easy.to.build.crm.controller;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.security.core.Authentication;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import site.easy.to.build.crm.entity.HistoricalDataUpload;
import site.easy.to.build.crm.service.upload.HistoricalDataUploadService;
import site.easy.to.build.crm.service.upload.CsvProcessingService;
import site.easy.to.build.crm.util.AuthenticationUtils;

import java.time.LocalDateTime;
import java.util.List;
import java.util.Map;
import java.util.Optional;

/**
 * Controller for historical data upload functionality
 * Provides endpoints for uploading CSV files and managing historical data imports
 */
@RestController
@RequestMapping("/api/historical-upload")
public class HistoricalDataUploadController {

    private static final Logger log = LoggerFactory.getLogger(HistoricalDataUploadController.class);

    @Autowired
    private HistoricalDataUploadService uploadService;

    @Autowired
    private CsvProcessingService csvProcessingService;

    @Autowired
    private AuthenticationUtils authenticationUtils;

    /**
     * Upload historical data file
     */
    @PostMapping("/upload")
    public ResponseEntity<?> uploadFile(
            @RequestParam("file") MultipartFile file,
            @RequestParam("fileType") String fileType,
            Authentication authentication) {

        try {
            log.info("üîÑ File upload request: {} ({})", file.getOriginalFilename(), fileType);

            // Validate file
            if (file.isEmpty()) {
                return ResponseEntity.badRequest()
                    .body(Map.of("error", "File is empty"));
            }

            if (!file.getOriginalFilename().toLowerCase().endsWith(".csv")) {
                return ResponseEntity.badRequest()
                    .body(Map.of("error", "Only CSV files are supported"));
            }

            // Validate file type
            HistoricalDataUpload.UploadFileType uploadFileType;
            try {
                uploadFileType = HistoricalDataUpload.UploadFileType.valueOf(fileType.toUpperCase());
            } catch (IllegalArgumentException e) {
                return ResponseEntity.badRequest()
                    .body(Map.of("error", "Invalid file type: " + fileType));
            }

            // Get current user
            Long userId = authenticationUtils.getCurrentUserId(authentication);
            if (userId == null) {
                return ResponseEntity.status(HttpStatus.UNAUTHORIZED)
                    .body(Map.of("error", "Authentication required"));
            }

            // Process upload
            HistoricalDataUploadService.UploadResult result = uploadService.uploadHistoricalData(
                file, uploadFileType, userId);

            if (result.isSuccess()) {
                return ResponseEntity.ok(Map.of(
                    "success", true,
                    "message", result.getMessage(),
                    "uploadId", result.getUploadId(),
                    "details", result.getDetails()
                ));
            } else {
                return ResponseEntity.status(HttpStatus.BAD_REQUEST)
                    .body(Map.of(
                        "success", false,
                        "message", result.getMessage(),
                        "uploadId", result.getUploadId()
                    ));
            }

        } catch (Exception e) {
            log.error("‚ùå Upload failed: {}", e.getMessage(), e);
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
                .body(Map.of("error", "Upload failed: " + e.getMessage()));
        }
    }

    /**
     * Get upload history for current user
     */
    @GetMapping("/history")
    public ResponseEntity<?> getUploadHistory(Authentication authentication) {
        try {
            Long userId = authenticationUtils.getCurrentUserId(authentication);
            if (userId == null) {
                return ResponseEntity.status(HttpStatus.UNAUTHORIZED)
                    .body(Map.of("error", "Authentication required"));
            }

            List<HistoricalDataUpload> uploads = uploadService.getUploadHistory(userId);

            return ResponseEntity.ok(Map.of(
                "uploads", uploads,
                "count", uploads.size()
            ));

        } catch (Exception e) {
            log.error("‚ùå Failed to get upload history: {}", e.getMessage(), e);
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
                .body(Map.of("error", "Failed to get upload history"));
        }
    }

    /**
     * Get specific upload details
     */
    @GetMapping("/upload/{uploadId}")
    public ResponseEntity<?> getUpload(@PathVariable Long uploadId, Authentication authentication) {
        try {
            Long userId = authenticationUtils.getCurrentUserId(authentication);
            if (userId == null) {
                return ResponseEntity.status(HttpStatus.UNAUTHORIZED)
                    .body(Map.of("error", "Authentication required"));
            }

            Optional<HistoricalDataUpload> uploadOpt = uploadService.getUpload(uploadId);

            if (uploadOpt.isEmpty()) {
                return ResponseEntity.notFound().build();
            }

            HistoricalDataUpload upload = uploadOpt.get();

            // Check if user owns this upload
            if (!upload.getUploadedBy().equals(userId)) {
                return ResponseEntity.status(HttpStatus.FORBIDDEN)
                    .body(Map.of("error", "Access denied"));
            }

            return ResponseEntity.ok(upload);

        } catch (Exception e) {
            log.error("‚ùå Failed to get upload details: {}", e.getMessage(), e);
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
                .body(Map.of("error", "Failed to get upload details"));
        }
    }

    /**
     * Download CSV template for specific file type
     */
    @GetMapping("/template/{fileType}")
    public ResponseEntity<String> downloadTemplate(@PathVariable String fileType) {
        try {
            // Validate file type
            try {
                HistoricalDataUpload.UploadFileType.valueOf(fileType.toUpperCase());
            } catch (IllegalArgumentException e) {
                return ResponseEntity.badRequest().build();
            }

            String template = csvProcessingService.createCsvTemplate(fileType);

            HttpHeaders headers = new HttpHeaders();
            headers.setContentType(MediaType.TEXT_PLAIN);
            headers.setContentDispositionFormData("attachment",
                fileType.toLowerCase() + "_template.csv");

            return new ResponseEntity<>(template, headers, HttpStatus.OK);

        } catch (Exception e) {
            log.error("‚ùå Failed to generate template: {}", e.getMessage(), e);
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).build();
        }
    }

    /**
     * Get supported file types and their descriptions
     */
    @GetMapping("/file-types")
    public ResponseEntity<?> getSupportedFileTypes() {
        try {
            Map<String, String> fileTypes = Map.of(
                "PROPERTIES", "Properties CSV - Property information",
                "CUSTOMERS", "Customers CSV - Customer/tenant/owner information",
                "PROPERTY_OWNERS", "Property Owners CSV - Property owner specific data",
                "TENANTS", "Tenants CSV - Tenant specific data",
                "RELATIONSHIPS", "Relationships CSV - Property-customer assignments",
                "TRANSACTIONS", "Transactions CSV - Financial transactions",
                "INVOICES", "Invoices CSV - Invoice data",
                "PAYMENTS", "Payments CSV - Payment data"
            );

            return ResponseEntity.ok(Map.of(
                "fileTypes", fileTypes,
                "maxFileSize", "10MB",
                "supportedFormats", List.of("CSV")
            ));

        } catch (Exception e) {
            log.error("‚ùå Failed to get file types: {}", e.getMessage(), e);
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
                .body(Map.of("error", "Failed to get file types"));
        }
    }

    /**
     * Get upload statistics for current user
     */
    @GetMapping("/stats")
    public ResponseEntity<?> getUploadStats(Authentication authentication) {
        try {
            Long userId = authenticationUtils.getCurrentUserId(authentication);
            if (userId == null) {
                return ResponseEntity.status(HttpStatus.UNAUTHORIZED)
                    .body(Map.of("error", "Authentication required"));
            }

            // Get recent uploads (last 30 days)
            LocalDateTime since = LocalDateTime.now().minusDays(30);
            List<HistoricalDataUpload> recentUploads = uploadService.getUploadHistory(userId)
                .stream()
                .filter(upload -> upload.getUploadDate().isAfter(since))
                .toList();

            long totalUploads = recentUploads.size();
            long completedUploads = recentUploads.stream()
                .filter(HistoricalDataUpload::isCompleted)
                .count();
            long failedUploads = recentUploads.stream()
                .filter(HistoricalDataUpload::hasFailed)
                .count();

            int totalRecordsCreated = recentUploads.stream()
                .mapToInt(upload -> upload.getRecordsCreated() != null ? upload.getRecordsCreated() : 0)
                .sum();

            int totalRecordsUpdated = recentUploads.stream()
                .mapToInt(upload -> upload.getRecordsUpdated() != null ? upload.getRecordsUpdated() : 0)
                .sum();

            return ResponseEntity.ok(Map.of(
                "period", "Last 30 days",
                "totalUploads", totalUploads,
                "completedUploads", completedUploads,
                "failedUploads", failedUploads,
                "successRate", totalUploads > 0 ? (completedUploads * 100.0 / totalUploads) : 0,
                "totalRecordsCreated", totalRecordsCreated,
                "totalRecordsUpdated", totalRecordsUpdated,
                "totalRecordsProcessed", totalRecordsCreated + totalRecordsUpdated
            ));

        } catch (Exception e) {
            log.error("‚ùå Failed to get upload stats: {}", e.getMessage(), e);
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
                .body(Map.of("error", "Failed to get upload stats"));
        }
    }
}